??squareroot
root
??root
??power
4^(1/2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
matrix_1 = cbind(c(1:3),c(4L,6L,7L),c(3L,8L,0L))
matrix2 = solve(matrix_1)
matrix_1 + matrix2
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data)
x$setmean(m)
m
}
cachemean(c(1:7))
library(datasets)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
mpgmeans = tapply(mtcars$mpg, mtcars$cyl, mean)
class(mpgmeans)
mpgmeans["8"] - mpgmeans["4"]
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
mean(c(1,2,3))
mean(c(1,2,3))
cachemean(c(1,2,3))
traceback()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector(c(1,2,3))
cachemean(c(1,2,3))
cachemean(1)
cachemean()
cachemean
View(cachemean)
makeVector(19)
cachemean(1)
cachemean <- function(x, ...) {
print("get mean")
print(m)
m <- x$getmean()
print("get mean 2")
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1)
cachemean <- function(x, ...) {
print("get mean")
m <- x$getmean()
print(m)
print("get mean 2")
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1)
cachemean([1])
cachemean(c(12))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean(makeVector(1))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x) {
m <- x$getmean()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1))
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setSolve <- function(solve) m <<- mean
getSolve <- function() m
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
}
cacheSolve <- function(x, ...) {
m <- x$getSolve()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setSolve(m)
m
}
cacheSolve(makeCacheMatrix(matrix_1))
cacheSolve(makeCacheMatrix(matrix_1))
cachemean(makeVector(1))
View(makeVector)
View(cachemean)
cachemean = function(x) {
m <- x$getmean()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1))
cachemean = function(x, ...) {
m <- x$getmean()
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(1))
cachemean(makeVector(1))
cachemean(makeVector(c(1,2)))
cachemean(makeVector(c(1,2)))
mean(1)
vector_1 = makeVector(1)
vector_1
class(vector_1)
View(makeVector)
cachemean(makeVector(vectest)
)
vectest = c(1, 2, 3, 4)
cachemean(makeVector(vectest))
cachemean(makeVector(vectest))
cachemean = function(x, ...) {
m <- x$getmean()
print("m")
print(m)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
print("x$get()")
print(x$get())
m <- mean(data, ...)
x$setmean(m)
print("m")
m
}
cachemean(makeVector(vectest))
m
cachemean(makeVector(c(vectest, vectest)))
cachemean(makeVector(cbind(vectest, vectest)))
cachemean(makeVector(cbind(vectest, vectest)))
lapply(lapply(list(vectest, vectest), makeVector), cachemean)
lapply(lapply(list(vectest, c(10,11)), makeVector), cachemean)
l = lapply(list(vectest, c(10,11)), makeVector)
l
lapply(l, cachemean)
cachemean = function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
lapply(l, cachemean)
l
cachemean(l)
cachemean(l$1)
cachemean(l[1])
cachemean(l[[1]])
cachemean(l[[2]])
l[[2]]
cachemean(makeVector(vectest))
cachemean(makeVector(vectest))
l2 = lapply(list(vectest, c(10,11)), makeVector)
sapply(l2, cachemean)
vectest
v1 = makeVector(vectest)
cachemean(v1)
cachemean(v1)
v2 = makeVector(vectest)
cachemean(v2)
setSolve <- function(solve) sol <<- solve
View(setSolve)
setSolve()
setSolve(matrix_1)
setSolve(matrix_1)
View(cacheSolve)
cacheSolve(makeCacheMatrix(matrix_1))
cacheSolve(makeCacheMatrix(matrix_1))
ma2 = makeCacheMatrix(matrix_1)
ma2
cacheSolve(ma2)
cacheSolve(ma2)
## Put comments here that give an overall description of what your
## functions do
# Functions to calculate inversed matrix and cache it and retrieve inversed matrix from cache (if calculated)
## function creating a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
sol <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x # non-var function: get input matrix x
setSolve <- function(solve) sol <<- solve
getSolve <- function() sol
list(set = set, get = get,
setSolve = setSolve,
getSolve = getSolve)
# output of makeCacheMatrix function: list of 4 functions: set get setSolve getSolve
}
## function computing the inverse of input matrix x returned by makeCacheMatrix above
cacheSolve <- function(x, ...) {## input of this function: output of makeCacheMatrix function
sol <- x$getSolve()
if(!is.null(sol)) {
message("getting cached data")
return(sol)
}
## data: input matrix x in makeCacheMatrix function
## retrieved by function "get" within makeCacheMatrix)
data <- x$get()
## Calculating inverse of matrix "data"
sol <- solve(data, ...)
## Caching the inverse of matrix "data" calculated above
x$setSolve(sol)
sol ## Return a matrix that is the inverse of 'x'
}
cacheSolve(ma2)
ma2 = makeCacheMatrix(matrix_1)
cacheSolve(ma2)
cacheSolve(ma2)
cacheSolve(makeCacheMatrix(matrix_1))
ma3 = makeCacheMatrix(matrix_1)
cacheSolve(ma3)
l1 = lapply(c(ma2,ma2), makeCacheMatrix)
lapply(l1, cacheSolve)
class(l1)
l1$1
l1[[1]]
cacheSolve(l1[[1]])
l1[[1]]
class(l1[[1]])
class(l1[1])
class(l1[1])
cacheSolve(l1[1])
sapply(l1, cacheSolve)
sapply(l1, cacheSolve)
cacheSolve(ma2)
lapply(lapply(list(ma2,ma2), makeCacheMatrix), cacheSolve)
l1 = lapply(list(ma2,ma2), makeCacheMatrix)
l1[1]
lapply(l1, cacheSolve)
apply(l1, cacheSolve)
apply(l1, FUN  = cacheSolve)
l1
l1[1]
l1[[1]
]
cacheSolve(l1[[1]])
identical(l1[[1]], makeCacheMatrix(ma2))
identical(l1[1], makeCacheMatrix(ma2))
